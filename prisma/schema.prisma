generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  username           String?          @unique @db.VarChar(15)
  avatar_url         String
  profesion          String
  email              String           @unique
  skills             String[]
  descriptionLong    String           @db.VarChar(80)
  about              String           @db.VarChar(300)
  social             String[]
  workExperience     String
  ownerProjectId     String
  companyName        String
  employmentType     String
  titleWork          String           @db.VarChar(80)
  isCurrent          Boolean
  isAdminUser        Boolean          @default(false)
  isUserPremium      Boolean          @default(false)
  date               DateTime         @default(now())
  description        String           @db.VarChar(300)
  titleProject       String           @db.VarChar(80)
  descriptionProject String           @db.VarChar(300)
  workSkills         String[]
  role               String
  createdAt          DateTime         @default(now())
  password           String
  workPosts          WorkPost[]
  candidatesLists    CandidatesList[]
  myReports          Reports[]
  Posts              Posts[]
  Bookmarks          Bookmarks[]
  comments           CommentsPost[]
}

model WorkPost {
  id              Int              @id @default(autoincrement())
  authorId        Int
  projectTitle    String
  projectLocation String
  isProjectRemote Boolean          @default(false)
  salaryRange     Decimal
  isPayment       Boolean          @default(false)
  skills          String[]
  author          User             @relation(fields: [authorId], references: [id])
  createdAt       DateTime         @default(now())
  modifiedAt      DateTime         @default(now())
  candidatesLists CandidatesList[]
}

model Posts {
  id                Int    @id @default(autoincrement())
  titlePost         String
  descriptionPost   String
  photoUrlWallpaper String
  imageUrlReference String
  categoryPost      String
  creatorPostId     Int
  creatorPost       User   @relation(fields: [creatorPostId], references: [id])
}

model CommentsPost {
  id           Int    @id @default(autoincrement())
  comment      String
  userCreatorId  Int
  userCreator User   @relation(fields: [userCreatorId], references: [id])
}

model CandidatesList {
  id                Int      @id @default(autoincrement())
  userId            Int
  username          String
  descriptionLong   String
  workId            Int
  isAccepted        Boolean  @default(false)
  isWaitingResponse Boolean  @default(true)
  workPostulated    WorkPost @relation(fields: [workId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
}

model CompanionsProject {
  id          Int @id @default(autoincrement())
  idCompanion Int
}

model Reports {
  id                Int      @id @default(autoincrement())
  userReporteredId  Int
  titleReport       String
  typeReport        String
  descriptionReport String
  isPending         Boolean  @default(true)
  isResolved        Boolean  @default(false)
  userReportered    User     @relation(fields: [userReporteredId], references: [id])
  createdAt         DateTime @default(now())
}

model Bookmarks {
  id            Int      @id @default(autoincrement())
  idPost        Int
  postSavedUser User     @relation(fields: [idPost], references: [id])
  createdAt     DateTime @default(now())
}
